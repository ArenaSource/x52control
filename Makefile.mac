TARGET   = mac.xpl
WD       = $(PWD)
OUTDIR   = $(PWD)/build
SDKDIR   = $(PWD)/sdk
INTDIR   = $(OUTDIR)/obj

CC       = gcc
CPP      = g++
LD       = g++
AR       = ar

CFLAGS   = -I. -I$(SDKDIR) -I/opt/local/include -DAPL
CPPFLAGS = -I. -I$(SDKDIR) -I/opt/local/include -DAPL
#LDFLAGS  = -nostdlib -Wl,--unresolved-symbols=report-all,-shared,-export-dynamic,-soname,$(TARGET)
LDFLAGS  = -framework IOKit -framework CoreFoundation -bundle -undefined dynamic_lookup
ARFLAGS  = rcs

###########################################################

print_error = (echo "\033[0;31m[ FAILED ]\033[0m" && false)
clearscreen = echo "\033[2J\033[H"

###########################################################

CSRC	= $(wildcard src/*.c)
CPPSRC	= $(wildcard src/*.cpp)
COBJ	= $(patsubst %.c, $(INTDIR)/%.o, $(CSRC))
CPPOBJ	= $(patsubst %.cpp, $(INTDIR)/%.opp, $(CPPSRC))

.SILENT:

all:		init make_dirs $(OUTDIR)/$(TARGET)
	echo "\033[0;36m[ finished    ]\033[0m"

init:
	echo "\033[0;36mstarting build\033[0m"

make_dirs:
	-mkdir -p $(OUTDIR)
	-mkdir -p $(INTDIR)/src

$(INTDIR)/src/%.o: $(PWD)/src/%.c
	echo "\033[0;32m[ compiling   ]\033[0m: " $@
	$(CC) $(CFLAGS) -c -o $@ $< || $(print_error)

$(INTDIR)/src/%.opp: $(PWD)/src/%.cpp
	echo "\033[0;32m[ compiling   ]\033[0m: " $@
	$(CPP) $(CPPFLAGS) -c -o $@ $< || $(print_error)

# TODO: determine libgcc dir (maybe via 'gcc -v'?)
$(INTDIR)/cstd.a:
	echo "\033[0;37m[ archiving   ]\033[0m: " $@
	-mkdir -p $(INTDIR)/tmp
	cd $(INTDIR)/tmp && \
	$(AR) x /usr/lib/libc.a && \
	$(AR) x /usr/lib/libc_nonshared.a && \
	$(AR) x /usr/lib/gcc/i386-redhat-linux/4.3.0/libgcc.a && \
	$(AR) x /usr/lib/gcc/i386-redhat-linux/4.3.0/libgcc_eh.a && \
	cd $(INTDIR) && \
	$(AR) $(ARFLAGS) cstd.a $(INTDIR)/tmp/* && \
	rm -rdf tmp && \
	cd $(WD)

$(OUTDIR)/$(TARGET):	$(COBJ) $(CPPOBJ)
	echo "\033[0;34m[ linking     ]\033[0m: " $@
	$(LD) $(LDFLAGS) -o $(OUTDIR)/$(TARGET) $(COBJ) $(CPPOBJ) /opt/local/lib/libusb.a || $(print_error)

clean:
	-rm -rdf build
